// Code generated by dbus-codegen-go DO NOT EDIT.
package dbusgen 

import (
	"context"
	"errors"
	"fmt"
	"github.com/godbus/dbus/v5"
)

// Signal is a common interface for all signals.
type Signal interface {
	Name() string
	Interface() string
	Sender() string

	path() dbus.ObjectPath
	values() []interface{}
}

// Emit sends the given signal to the bus.
func Emit(conn *dbus.Conn, s Signal) error {
	return conn.Emit(s.path(), s.Interface()+"."+s.Name(), s.values()...)
}

// ErrUnknownSignal is returned by LookupSignal when a signal cannot be resolved.
var ErrUnknownSignal = errors.New("unknown signal")

// LookupSignal converts the given raw D-Bus signal with variable body
// into one with typed structured body or returns ErrUnknownSignal error.
func LookupSignal(signal *dbus.Signal) (Signal, error) {
	switch signal.Name {
	case InterfaceOrg_Freedesktop_DBus_Properties + "." + "PropertiesChanged":
		v0, ok := signal.Body[0].(string)
		if !ok {
			return nil, fmt.Errorf("prop .Interface is %T, not string", signal.Body[0])
		}
		v1, ok := signal.Body[1].(map[string]dbus.Variant)
		if !ok {
			return nil, fmt.Errorf("prop .ChangedProperties is %T, not map[string]dbus.Variant", signal.Body[1])
		}
		v2, ok := signal.Body[2].([]string)
		if !ok {
			return nil, fmt.Errorf("prop .InvalidatedProperties is %T, not []string", signal.Body[2])
		}
		return &Org_Freedesktop_DBus_Properties_PropertiesChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &Org_Freedesktop_DBus_Properties_PropertiesChangedSignalBody{
				Interface:             v0,
				ChangedProperties:     v1,
				InvalidatedProperties: v2,
			},
		}, nil
	default:
		return nil, ErrUnknownSignal
	}
}

// AddMatchSignal registers a match rule for the given signal,
// opts are appended to the automatically generated signal's rules.
func AddMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.AddMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// RemoveMatchSignal unregisters the previously registered subscription.
func RemoveMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.RemoveMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// Interface name constants.
const (
	InterfaceOrg_Freedesktop_DBus_Peer           = "org.freedesktop.DBus.Peer"
	InterfaceOrg_Freedesktop_DBus_Introspectable = "org.freedesktop.DBus.Introspectable"
	InterfaceOrg_Freedesktop_DBus_Properties     = "org.freedesktop.DBus.Properties"
	InterfaceOrg_Freedesktop_Resolve1_Manager    = "org.freedesktop.resolve1.Manager"
)

// Org_Freedesktop_DBus_Peerer is org.freedesktop.DBus.Peer interface.
type Org_Freedesktop_DBus_Peerer interface {
	// Ping is org.freedesktop.DBus.Peer.Ping method.
	Ping() (err *dbus.Error)
	// GetMachineId is org.freedesktop.DBus.Peer.GetMachineId method.
	GetMachineId() (machineUuid string, err *dbus.Error)
}

// ExportOrg_Freedesktop_DBus_Peer exports the given object that implements org.freedesktop.DBus.Peer on the bus.
func ExportOrg_Freedesktop_DBus_Peer(conn *dbus.Conn, path dbus.ObjectPath, v Org_Freedesktop_DBus_Peerer) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{
		"Ping":         v.Ping,
		"GetMachineId": v.GetMachineId,
	}, path, InterfaceOrg_Freedesktop_DBus_Peer)
}

// UnexportOrg_Freedesktop_DBus_Peer unexports org.freedesktop.DBus.Peer interface on the named path.
func UnexportOrg_Freedesktop_DBus_Peer(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceOrg_Freedesktop_DBus_Peer)
}

// UnimplementedOrg_Freedesktop_DBus_Peer can be embedded to have forward compatible server implementations.
type UnimplementedOrg_Freedesktop_DBus_Peer struct{}

func (*UnimplementedOrg_Freedesktop_DBus_Peer) iface() string {
	return InterfaceOrg_Freedesktop_DBus_Peer
}

func (*UnimplementedOrg_Freedesktop_DBus_Peer) Ping() (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_DBus_Peer) GetMachineId() (machineUuid string, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

// NewOrg_Freedesktop_DBus_Peer creates and allocates org.freedesktop.DBus.Peer.
func NewOrg_Freedesktop_DBus_Peer(object dbus.BusObject) *Org_Freedesktop_DBus_Peer {
	return &Org_Freedesktop_DBus_Peer{object}
}

// Org_Freedesktop_DBus_Peer implements org.freedesktop.DBus.Peer D-Bus interface.
type Org_Freedesktop_DBus_Peer struct {
	object dbus.BusObject
}

// Ping calls org.freedesktop.DBus.Peer.Ping method.
func (o *Org_Freedesktop_DBus_Peer) Ping(ctx context.Context) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_DBus_Peer+".Ping", 0).Store()
	return
}

// GetMachineId calls org.freedesktop.DBus.Peer.GetMachineId method.
func (o *Org_Freedesktop_DBus_Peer) GetMachineId(ctx context.Context) (machineUuid string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_DBus_Peer+".GetMachineId", 0).Store(&machineUuid)
	return
}

// Org_Freedesktop_DBus_Introspectableer is org.freedesktop.DBus.Introspectable interface.
type Org_Freedesktop_DBus_Introspectableer interface {
	// Introspect is org.freedesktop.DBus.Introspectable.Introspect method.
	Introspect() (data string, err *dbus.Error)
}

// ExportOrg_Freedesktop_DBus_Introspectable exports the given object that implements org.freedesktop.DBus.Introspectable on the bus.
func ExportOrg_Freedesktop_DBus_Introspectable(conn *dbus.Conn, path dbus.ObjectPath, v Org_Freedesktop_DBus_Introspectableer) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{
		"Introspect": v.Introspect,
	}, path, InterfaceOrg_Freedesktop_DBus_Introspectable)
}

// UnexportOrg_Freedesktop_DBus_Introspectable unexports org.freedesktop.DBus.Introspectable interface on the named path.
func UnexportOrg_Freedesktop_DBus_Introspectable(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceOrg_Freedesktop_DBus_Introspectable)
}

// UnimplementedOrg_Freedesktop_DBus_Introspectable can be embedded to have forward compatible server implementations.
type UnimplementedOrg_Freedesktop_DBus_Introspectable struct{}

func (*UnimplementedOrg_Freedesktop_DBus_Introspectable) iface() string {
	return InterfaceOrg_Freedesktop_DBus_Introspectable
}

func (*UnimplementedOrg_Freedesktop_DBus_Introspectable) Introspect() (data string, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

// NewOrg_Freedesktop_DBus_Introspectable creates and allocates org.freedesktop.DBus.Introspectable.
func NewOrg_Freedesktop_DBus_Introspectable(object dbus.BusObject) *Org_Freedesktop_DBus_Introspectable {
	return &Org_Freedesktop_DBus_Introspectable{object}
}

// Org_Freedesktop_DBus_Introspectable implements org.freedesktop.DBus.Introspectable D-Bus interface.
type Org_Freedesktop_DBus_Introspectable struct {
	object dbus.BusObject
}

// Introspect calls org.freedesktop.DBus.Introspectable.Introspect method.
func (o *Org_Freedesktop_DBus_Introspectable) Introspect(ctx context.Context) (data string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_DBus_Introspectable+".Introspect", 0).Store(&data)
	return
}

// Org_Freedesktop_DBus_Propertieser is org.freedesktop.DBus.Properties interface.
type Org_Freedesktop_DBus_Propertieser interface {
	// Get is org.freedesktop.DBus.Properties.Get method.
	Get(inInterface string, property string) (value dbus.Variant, err *dbus.Error)
	// GetAll is org.freedesktop.DBus.Properties.GetAll method.
	GetAll(inInterface string) (properties map[string]dbus.Variant, err *dbus.Error)
	// Set is org.freedesktop.DBus.Properties.Set method.
	Set(inInterface string, property string, value dbus.Variant) (err *dbus.Error)
}

// ExportOrg_Freedesktop_DBus_Properties exports the given object that implements org.freedesktop.DBus.Properties on the bus.
func ExportOrg_Freedesktop_DBus_Properties(conn *dbus.Conn, path dbus.ObjectPath, v Org_Freedesktop_DBus_Propertieser) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{
		"Get":    v.Get,
		"GetAll": v.GetAll,
		"Set":    v.Set,
	}, path, InterfaceOrg_Freedesktop_DBus_Properties)
}

// UnexportOrg_Freedesktop_DBus_Properties unexports org.freedesktop.DBus.Properties interface on the named path.
func UnexportOrg_Freedesktop_DBus_Properties(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceOrg_Freedesktop_DBus_Properties)
}

// UnimplementedOrg_Freedesktop_DBus_Properties can be embedded to have forward compatible server implementations.
type UnimplementedOrg_Freedesktop_DBus_Properties struct{}

func (*UnimplementedOrg_Freedesktop_DBus_Properties) iface() string {
	return InterfaceOrg_Freedesktop_DBus_Properties
}

func (*UnimplementedOrg_Freedesktop_DBus_Properties) Get(inInterface string, property string) (value dbus.Variant, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_DBus_Properties) GetAll(inInterface string) (properties map[string]dbus.Variant, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_DBus_Properties) Set(inInterface string, property string, value dbus.Variant) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

// NewOrg_Freedesktop_DBus_Properties creates and allocates org.freedesktop.DBus.Properties.
func NewOrg_Freedesktop_DBus_Properties(object dbus.BusObject) *Org_Freedesktop_DBus_Properties {
	return &Org_Freedesktop_DBus_Properties{object}
}

// Org_Freedesktop_DBus_Properties implements org.freedesktop.DBus.Properties D-Bus interface.
type Org_Freedesktop_DBus_Properties struct {
	object dbus.BusObject
}

// Get calls org.freedesktop.DBus.Properties.Get method.
func (o *Org_Freedesktop_DBus_Properties) Get(ctx context.Context, inInterface string, property string) (value dbus.Variant, err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_DBus_Properties+".Get", 0, inInterface, property).Store(&value)
	return
}

// GetAll calls org.freedesktop.DBus.Properties.GetAll method.
func (o *Org_Freedesktop_DBus_Properties) GetAll(ctx context.Context, inInterface string) (properties map[string]dbus.Variant, err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_DBus_Properties+".GetAll", 0, inInterface).Store(&properties)
	return
}

// Set calls org.freedesktop.DBus.Properties.Set method.
func (o *Org_Freedesktop_DBus_Properties) Set(ctx context.Context, inInterface string, property string, value dbus.Variant) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_DBus_Properties+".Set", 0, inInterface, property, value).Store()
	return
}

// Org_Freedesktop_DBus_Properties_PropertiesChangedSignal represents org.freedesktop.DBus.Properties.PropertiesChanged signal.
type Org_Freedesktop_DBus_Properties_PropertiesChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *Org_Freedesktop_DBus_Properties_PropertiesChangedSignalBody
}

// Name returns the signal's name.
func (s *Org_Freedesktop_DBus_Properties_PropertiesChangedSignal) Name() string {
	return "PropertiesChanged"
}

// Interface returns the signal's interface.
func (s *Org_Freedesktop_DBus_Properties_PropertiesChangedSignal) Interface() string {
	return InterfaceOrg_Freedesktop_DBus_Properties
}

// Sender returns the signal's sender unique name.
func (s *Org_Freedesktop_DBus_Properties_PropertiesChangedSignal) Sender() string {
	return s.sender
}

func (s *Org_Freedesktop_DBus_Properties_PropertiesChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *Org_Freedesktop_DBus_Properties_PropertiesChangedSignal) values() []interface{} {
	return []interface{}{s.Body.Interface, s.Body.ChangedProperties, s.Body.InvalidatedProperties}
}

// Org_Freedesktop_DBus_Properties_PropertiesChangedSignalBody is body container.
type Org_Freedesktop_DBus_Properties_PropertiesChangedSignalBody struct {
	Interface             string
	ChangedProperties     map[string]dbus.Variant
	InvalidatedProperties []string
}

// Org_Freedesktop_Resolve1_Managerer is org.freedesktop.resolve1.Manager interface.
type Org_Freedesktop_Resolve1_Managerer interface {
	// ResolveHostname is org.freedesktop.resolve1.Manager.ResolveHostname method.
	ResolveHostname(ifindex int32, name string, family int32, flags uint64) (addresses []struct {
		V0 int32
		V1 int32
		V2 []byte
	}, canonical string, flags uint64, err *dbus.Error)
	// ResolveAddress is org.freedesktop.resolve1.Manager.ResolveAddress method.
	ResolveAddress(ifindex int32, family int32, address []byte, flags uint64) (names []struct {
		V0 int32
		V1 string
	}, flags uint64, err *dbus.Error)
	// ResolveRecord is org.freedesktop.resolve1.Manager.ResolveRecord method.
	ResolveRecord(ifindex int32, name string, class uint16, inType uint16, flags uint64) (records []struct {
		V0 int32
		V1 uint16
		V2 uint16
		V3 []byte
	}, flags uint64, err *dbus.Error)
	// ResolveService is org.freedesktop.resolve1.Manager.ResolveService method.
	ResolveService(ifindex int32, name string, inType string, domain string, family int32, flags uint64) (srvData []struct {
		V0 uint16
		V1 uint16
		V2 uint16
		V3 string
		V4 []struct {
			V0 int32
			V1 int32
			V2 []byte
		}
		V5 string
	}, txtData [][]byte, canonicalName string, canonicalType string, canonicalDomain string, flags uint64, err *dbus.Error)
	// GetLink is org.freedesktop.resolve1.Manager.GetLink method.
	GetLink(ifindex int32) (path dbus.ObjectPath, err *dbus.Error)
	// SetLinkDNS is org.freedesktop.resolve1.Manager.SetLinkDNS method.
	SetLinkDNS(ifindex int32, addresses []struct {
		V0 int32
		V1 []byte
	}) (err *dbus.Error)
	// SetLinkDNSEx is org.freedesktop.resolve1.Manager.SetLinkDNSEx method.
	SetLinkDNSEx(ifindex int32, addresses []struct {
		V0 int32
		V1 []byte
		V2 uint16
		V3 string
	}) (err *dbus.Error)
	// SetLinkDomains is org.freedesktop.resolve1.Manager.SetLinkDomains method.
	SetLinkDomains(ifindex int32, domains []struct {
		V0 string
		V1 bool
	}) (err *dbus.Error)
	// SetLinkDefaultRoute is org.freedesktop.resolve1.Manager.SetLinkDefaultRoute method.
	SetLinkDefaultRoute(ifindex int32, enable bool) (err *dbus.Error)
	// SetLinkLLMNR is org.freedesktop.resolve1.Manager.SetLinkLLMNR method.
	SetLinkLLMNR(ifindex int32, mode string) (err *dbus.Error)
	// SetLinkMulticastDNS is org.freedesktop.resolve1.Manager.SetLinkMulticastDNS method.
	SetLinkMulticastDNS(ifindex int32, mode string) (err *dbus.Error)
	// SetLinkDNSOverTLS is org.freedesktop.resolve1.Manager.SetLinkDNSOverTLS method.
	SetLinkDNSOverTLS(ifindex int32, mode string) (err *dbus.Error)
	// SetLinkDNSSEC is org.freedesktop.resolve1.Manager.SetLinkDNSSEC method.
	SetLinkDNSSEC(ifindex int32, mode string) (err *dbus.Error)
	// SetLinkDNSSECNegativeTrustAnchors is org.freedesktop.resolve1.Manager.SetLinkDNSSECNegativeTrustAnchors method.
	SetLinkDNSSECNegativeTrustAnchors(ifindex int32, names []string) (err *dbus.Error)
	// RevertLink is org.freedesktop.resolve1.Manager.RevertLink method.
	RevertLink(ifindex int32) (err *dbus.Error)
	// RegisterService is org.freedesktop.resolve1.Manager.RegisterService method.
	RegisterService(name string, nameTemplate string, inType string, servicePort uint16, servicePriority uint16, serviceWeight uint16, txtDatas []map[string][]byte) (servicePath dbus.ObjectPath, err *dbus.Error)
	// UnregisterService is org.freedesktop.resolve1.Manager.UnregisterService method.
	UnregisterService(servicePath dbus.ObjectPath) (err *dbus.Error)
	// ResetStatistics is org.freedesktop.resolve1.Manager.ResetStatistics method.
	ResetStatistics() (err *dbus.Error)
	// FlushCaches is org.freedesktop.resolve1.Manager.FlushCaches method.
	FlushCaches() (err *dbus.Error)
	// ResetServerFeatures is org.freedesktop.resolve1.Manager.ResetServerFeatures method.
	ResetServerFeatures() (err *dbus.Error)
}

// ExportOrg_Freedesktop_Resolve1_Manager exports the given object that implements org.freedesktop.resolve1.Manager on the bus.
func ExportOrg_Freedesktop_Resolve1_Manager(conn *dbus.Conn, path dbus.ObjectPath, v Org_Freedesktop_Resolve1_Managerer) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{
		"ResolveHostname":                   v.ResolveHostname,
		"ResolveAddress":                    v.ResolveAddress,
		"ResolveRecord":                     v.ResolveRecord,
		"ResolveService":                    v.ResolveService,
		"GetLink":                           v.GetLink,
		"SetLinkDNS":                        v.SetLinkDNS,
		"SetLinkDNSEx":                      v.SetLinkDNSEx,
		"SetLinkDomains":                    v.SetLinkDomains,
		"SetLinkDefaultRoute":               v.SetLinkDefaultRoute,
		"SetLinkLLMNR":                      v.SetLinkLLMNR,
		"SetLinkMulticastDNS":               v.SetLinkMulticastDNS,
		"SetLinkDNSOverTLS":                 v.SetLinkDNSOverTLS,
		"SetLinkDNSSEC":                     v.SetLinkDNSSEC,
		"SetLinkDNSSECNegativeTrustAnchors": v.SetLinkDNSSECNegativeTrustAnchors,
		"RevertLink":                        v.RevertLink,
		"RegisterService":                   v.RegisterService,
		"UnregisterService":                 v.UnregisterService,
		"ResetStatistics":                   v.ResetStatistics,
		"FlushCaches":                       v.FlushCaches,
		"ResetServerFeatures":               v.ResetServerFeatures,
	}, path, InterfaceOrg_Freedesktop_Resolve1_Manager)
}

// UnexportOrg_Freedesktop_Resolve1_Manager unexports org.freedesktop.resolve1.Manager interface on the named path.
func UnexportOrg_Freedesktop_Resolve1_Manager(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceOrg_Freedesktop_Resolve1_Manager)
}

// UnimplementedOrg_Freedesktop_Resolve1_Manager can be embedded to have forward compatible server implementations.
type UnimplementedOrg_Freedesktop_Resolve1_Manager struct{}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) iface() string {
	return InterfaceOrg_Freedesktop_Resolve1_Manager
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) ResolveHostname(ifindex int32, name string, family int32, flags uint64) (addresses []struct {
	V0 int32
	V1 int32
	V2 []byte
}, canonical string, flags uint64, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) ResolveAddress(ifindex int32, family int32, address []byte, flags uint64) (names []struct {
	V0 int32
	V1 string
}, flags uint64, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) ResolveRecord(ifindex int32, name string, class uint16, inType uint16, flags uint64) (records []struct {
	V0 int32
	V1 uint16
	V2 uint16
	V3 []byte
}, flags uint64, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) ResolveService(ifindex int32, name string, inType string, domain string, family int32, flags uint64) (srvData []struct {
	V0 uint16
	V1 uint16
	V2 uint16
	V3 string
	V4 []struct {
		V0 int32
		V1 int32
		V2 []byte
	}
	V5 string
}, txtData [][]byte, canonicalName string, canonicalType string, canonicalDomain string, flags uint64, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) GetLink(ifindex int32) (path dbus.ObjectPath, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) SetLinkDNS(ifindex int32, addresses []struct {
	V0 int32
	V1 []byte
}) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) SetLinkDNSEx(ifindex int32, addresses []struct {
	V0 int32
	V1 []byte
	V2 uint16
	V3 string
}) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) SetLinkDomains(ifindex int32, domains []struct {
	V0 string
	V1 bool
}) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) SetLinkDefaultRoute(ifindex int32, enable bool) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) SetLinkLLMNR(ifindex int32, mode string) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) SetLinkMulticastDNS(ifindex int32, mode string) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) SetLinkDNSOverTLS(ifindex int32, mode string) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) SetLinkDNSSEC(ifindex int32, mode string) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) SetLinkDNSSECNegativeTrustAnchors(ifindex int32, names []string) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) RevertLink(ifindex int32) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) RegisterService(name string, nameTemplate string, inType string, servicePort uint16, servicePriority uint16, serviceWeight uint16, txtDatas []map[string][]byte) (servicePath dbus.ObjectPath, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) UnregisterService(servicePath dbus.ObjectPath) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) ResetStatistics() (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) FlushCaches() (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedOrg_Freedesktop_Resolve1_Manager) ResetServerFeatures() (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

// NewOrg_Freedesktop_Resolve1_Manager creates and allocates org.freedesktop.resolve1.Manager.
func NewOrg_Freedesktop_Resolve1_Manager(object dbus.BusObject) *Org_Freedesktop_Resolve1_Manager {
	return &Org_Freedesktop_Resolve1_Manager{object}
}

// Org_Freedesktop_Resolve1_Manager implements org.freedesktop.resolve1.Manager D-Bus interface.
type Org_Freedesktop_Resolve1_Manager struct {
	object dbus.BusObject
}

// ResolveHostname calls org.freedesktop.resolve1.Manager.ResolveHostname method.
func (o *Org_Freedesktop_Resolve1_Manager) ResolveHostname(ctx context.Context, ifindex int32, name string, family int32, flags uint64) (addresses []struct {
	V0 int32
	V1 int32
	V2 []byte
}, canonical string, flags uint64, err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".ResolveHostname", 0, ifindex, name, family, flags).Store(&addresses, &canonical, &flags)
	return
}

// ResolveAddress calls org.freedesktop.resolve1.Manager.ResolveAddress method.
func (o *Org_Freedesktop_Resolve1_Manager) ResolveAddress(ctx context.Context, ifindex int32, family int32, address []byte, flags uint64) (names []struct {
	V0 int32
	V1 string
}, flags uint64, err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".ResolveAddress", 0, ifindex, family, address, flags).Store(&names, &flags)
	return
}

// ResolveRecord calls org.freedesktop.resolve1.Manager.ResolveRecord method.
func (o *Org_Freedesktop_Resolve1_Manager) ResolveRecord(ctx context.Context, ifindex int32, name string, class uint16, inType uint16, flags uint64) (records []struct {
	V0 int32
	V1 uint16
	V2 uint16
	V3 []byte
}, flags uint64, err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".ResolveRecord", 0, ifindex, name, class, inType, flags).Store(&records, &flags)
	return
}

// ResolveService calls org.freedesktop.resolve1.Manager.ResolveService method.
func (o *Org_Freedesktop_Resolve1_Manager) ResolveService(ctx context.Context, ifindex int32, name string, inType string, domain string, family int32, flags uint64) (srvData []struct {
	V0 uint16
	V1 uint16
	V2 uint16
	V3 string
	V4 []struct {
		V0 int32
		V1 int32
		V2 []byte
	}
	V5 string
}, txtData [][]byte, canonicalName string, canonicalType string, canonicalDomain string, flags uint64, err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".ResolveService", 0, ifindex, name, inType, domain, family, flags).Store(&srvData, &txtData, &canonicalName, &canonicalType, &canonicalDomain, &flags)
	return
}

// GetLink calls org.freedesktop.resolve1.Manager.GetLink method.
func (o *Org_Freedesktop_Resolve1_Manager) GetLink(ctx context.Context, ifindex int32) (path dbus.ObjectPath, err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".GetLink", 0, ifindex).Store(&path)
	return
}

// SetLinkDNS calls org.freedesktop.resolve1.Manager.SetLinkDNS method.
func (o *Org_Freedesktop_Resolve1_Manager) SetLinkDNS(ctx context.Context, ifindex int32, addresses []struct {
	V0 int32
	V1 []byte
}) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".SetLinkDNS", 0, ifindex, addresses).Store()
	return
}

// SetLinkDNSEx calls org.freedesktop.resolve1.Manager.SetLinkDNSEx method.
func (o *Org_Freedesktop_Resolve1_Manager) SetLinkDNSEx(ctx context.Context, ifindex int32, addresses []struct {
	V0 int32
	V1 []byte
	V2 uint16
	V3 string
}) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".SetLinkDNSEx", 0, ifindex, addresses).Store()
	return
}

// SetLinkDomains calls org.freedesktop.resolve1.Manager.SetLinkDomains method.
func (o *Org_Freedesktop_Resolve1_Manager) SetLinkDomains(ctx context.Context, ifindex int32, domains []struct {
	V0 string
	V1 bool
}) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".SetLinkDomains", 0, ifindex, domains).Store()
	return
}

// SetLinkDefaultRoute calls org.freedesktop.resolve1.Manager.SetLinkDefaultRoute method.
func (o *Org_Freedesktop_Resolve1_Manager) SetLinkDefaultRoute(ctx context.Context, ifindex int32, enable bool) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".SetLinkDefaultRoute", 0, ifindex, enable).Store()
	return
}

// SetLinkLLMNR calls org.freedesktop.resolve1.Manager.SetLinkLLMNR method.
func (o *Org_Freedesktop_Resolve1_Manager) SetLinkLLMNR(ctx context.Context, ifindex int32, mode string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".SetLinkLLMNR", 0, ifindex, mode).Store()
	return
}

// SetLinkMulticastDNS calls org.freedesktop.resolve1.Manager.SetLinkMulticastDNS method.
func (o *Org_Freedesktop_Resolve1_Manager) SetLinkMulticastDNS(ctx context.Context, ifindex int32, mode string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".SetLinkMulticastDNS", 0, ifindex, mode).Store()
	return
}

// SetLinkDNSOverTLS calls org.freedesktop.resolve1.Manager.SetLinkDNSOverTLS method.
func (o *Org_Freedesktop_Resolve1_Manager) SetLinkDNSOverTLS(ctx context.Context, ifindex int32, mode string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".SetLinkDNSOverTLS", 0, ifindex, mode).Store()
	return
}

// SetLinkDNSSEC calls org.freedesktop.resolve1.Manager.SetLinkDNSSEC method.
func (o *Org_Freedesktop_Resolve1_Manager) SetLinkDNSSEC(ctx context.Context, ifindex int32, mode string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".SetLinkDNSSEC", 0, ifindex, mode).Store()
	return
}

// SetLinkDNSSECNegativeTrustAnchors calls org.freedesktop.resolve1.Manager.SetLinkDNSSECNegativeTrustAnchors method.
func (o *Org_Freedesktop_Resolve1_Manager) SetLinkDNSSECNegativeTrustAnchors(ctx context.Context, ifindex int32, names []string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".SetLinkDNSSECNegativeTrustAnchors", 0, ifindex, names).Store()
	return
}

// RevertLink calls org.freedesktop.resolve1.Manager.RevertLink method.
func (o *Org_Freedesktop_Resolve1_Manager) RevertLink(ctx context.Context, ifindex int32) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".RevertLink", 0, ifindex).Store()
	return
}

// RegisterService calls org.freedesktop.resolve1.Manager.RegisterService method.
func (o *Org_Freedesktop_Resolve1_Manager) RegisterService(ctx context.Context, name string, nameTemplate string, inType string, servicePort uint16, servicePriority uint16, serviceWeight uint16, txtDatas []map[string][]byte) (servicePath dbus.ObjectPath, err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".RegisterService", 0, name, nameTemplate, inType, servicePort, servicePriority, serviceWeight, txtDatas).Store(&servicePath)
	return
}

// UnregisterService calls org.freedesktop.resolve1.Manager.UnregisterService method.
func (o *Org_Freedesktop_Resolve1_Manager) UnregisterService(ctx context.Context, servicePath dbus.ObjectPath) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".UnregisterService", 0, servicePath).Store()
	return
}

// ResetStatistics calls org.freedesktop.resolve1.Manager.ResetStatistics method.
func (o *Org_Freedesktop_Resolve1_Manager) ResetStatistics(ctx context.Context) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".ResetStatistics", 0).Store()
	return
}

// FlushCaches calls org.freedesktop.resolve1.Manager.FlushCaches method.
func (o *Org_Freedesktop_Resolve1_Manager) FlushCaches(ctx context.Context) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".FlushCaches", 0).Store()
	return
}

// ResetServerFeatures calls org.freedesktop.resolve1.Manager.ResetServerFeatures method.
func (o *Org_Freedesktop_Resolve1_Manager) ResetServerFeatures(ctx context.Context) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceOrg_Freedesktop_Resolve1_Manager+".ResetServerFeatures", 0).Store()
	return
}

// GetLLMNRHostname gets org.freedesktop.resolve1.Manager.LLMNRHostname property.
func (o *Org_Freedesktop_Resolve1_Manager) GetLLMNRHostname(ctx context.Context) (lLMNRHostname string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "LLMNRHostname").Store(&lLMNRHostname)
	return
}

// GetLLMNR gets org.freedesktop.resolve1.Manager.LLMNR property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetLLMNR(ctx context.Context) (lLMNR string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "LLMNR").Store(&lLMNR)
	return
}

// GetMulticastDNS gets org.freedesktop.resolve1.Manager.MulticastDNS property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetMulticastDNS(ctx context.Context) (multicastDNS string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "MulticastDNS").Store(&multicastDNS)
	return
}

// GetDNSOverTLS gets org.freedesktop.resolve1.Manager.DNSOverTLS property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetDNSOverTLS(ctx context.Context) (dNSOverTLS string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "DNSOverTLS").Store(&dNSOverTLS)
	return
}

// GetDNS gets org.freedesktop.resolve1.Manager.DNS property.
func (o *Org_Freedesktop_Resolve1_Manager) GetDNS(ctx context.Context) (dNS []struct {
	V0 int32
	V1 int32
	V2 []byte
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "DNS").Store(&dNS)
	return
}

// GetDNSEx gets org.freedesktop.resolve1.Manager.DNSEx property.
func (o *Org_Freedesktop_Resolve1_Manager) GetDNSEx(ctx context.Context) (dNSEx []struct {
	V0 int32
	V1 int32
	V2 []byte
	V3 uint16
	V4 string
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "DNSEx").Store(&dNSEx)
	return
}

// GetFallbackDNS gets org.freedesktop.resolve1.Manager.FallbackDNS property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = const
func (o *Org_Freedesktop_Resolve1_Manager) GetFallbackDNS(ctx context.Context) (fallbackDNS []struct {
	V0 int32
	V1 int32
	V2 []byte
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "FallbackDNS").Store(&fallbackDNS)
	return
}

// GetFallbackDNSEx gets org.freedesktop.resolve1.Manager.FallbackDNSEx property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = const
func (o *Org_Freedesktop_Resolve1_Manager) GetFallbackDNSEx(ctx context.Context) (fallbackDNSEx []struct {
	V0 int32
	V1 int32
	V2 []byte
	V3 uint16
	V4 string
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "FallbackDNSEx").Store(&fallbackDNSEx)
	return
}

// GetCurrentDNSServer gets org.freedesktop.resolve1.Manager.CurrentDNSServer property.
func (o *Org_Freedesktop_Resolve1_Manager) GetCurrentDNSServer(ctx context.Context) (currentDNSServer struct {
	V0 int32
	V1 int32
	V2 []byte
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "CurrentDNSServer").Store(&currentDNSServer)
	return
}

// GetCurrentDNSServerEx gets org.freedesktop.resolve1.Manager.CurrentDNSServerEx property.
func (o *Org_Freedesktop_Resolve1_Manager) GetCurrentDNSServerEx(ctx context.Context) (currentDNSServerEx struct {
	V0 int32
	V1 int32
	V2 []byte
	V3 uint16
	V4 string
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "CurrentDNSServerEx").Store(&currentDNSServerEx)
	return
}

// GetDomains gets org.freedesktop.resolve1.Manager.Domains property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetDomains(ctx context.Context) (domains []struct {
	V0 int32
	V1 string
	V2 bool
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "Domains").Store(&domains)
	return
}

// GetTransactionStatistics gets org.freedesktop.resolve1.Manager.TransactionStatistics property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetTransactionStatistics(ctx context.Context) (transactionStatistics struct {
	V0 uint64
	V1 uint64
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "TransactionStatistics").Store(&transactionStatistics)
	return
}

// GetCacheStatistics gets org.freedesktop.resolve1.Manager.CacheStatistics property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetCacheStatistics(ctx context.Context) (cacheStatistics struct {
	V0 uint64
	V1 uint64
	V2 uint64
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "CacheStatistics").Store(&cacheStatistics)
	return
}

// GetDNSSEC gets org.freedesktop.resolve1.Manager.DNSSEC property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetDNSSEC(ctx context.Context) (dNSSEC string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "DNSSEC").Store(&dNSSEC)
	return
}

// GetDNSSECStatistics gets org.freedesktop.resolve1.Manager.DNSSECStatistics property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetDNSSECStatistics(ctx context.Context) (dNSSECStatistics struct {
	V0 uint64
	V1 uint64
	V2 uint64
	V3 uint64
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "DNSSECStatistics").Store(&dNSSECStatistics)
	return
}

// GetDNSSECSupported gets org.freedesktop.resolve1.Manager.DNSSECSupported property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetDNSSECSupported(ctx context.Context) (dNSSECSupported bool, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "DNSSECSupported").Store(&dNSSECSupported)
	return
}

// GetDNSSECNegativeTrustAnchors gets org.freedesktop.resolve1.Manager.DNSSECNegativeTrustAnchors property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetDNSSECNegativeTrustAnchors(ctx context.Context) (dNSSECNegativeTrustAnchors []string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "DNSSECNegativeTrustAnchors").Store(&dNSSECNegativeTrustAnchors)
	return
}

// GetDNSStubListener gets org.freedesktop.resolve1.Manager.DNSStubListener property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetDNSStubListener(ctx context.Context) (dNSStubListener string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "DNSStubListener").Store(&dNSStubListener)
	return
}

// GetResolvConfMode gets org.freedesktop.resolve1.Manager.ResolvConfMode property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Org_Freedesktop_Resolve1_Manager) GetResolvConfMode(ctx context.Context) (resolvConfMode string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceOrg_Freedesktop_Resolve1_Manager, "ResolvConfMode").Store(&resolvConfMode)
	return
}
