// Code generated by dbus-codegen-go DO NOT EDIT.
package resolve1

import (
	"context"
	"github.com/godbus/dbus/v5"
)

// Interface name constants.
const (
	InterfaceManager = "org.freedesktop.resolve1.Manager"
)

// NewManager creates and allocates org.freedesktop.resolve1.Manager.
func NewManager(object dbus.BusObject) *Manager {
	return &Manager{object}
}

// Manager implements org.freedesktop.resolve1.Manager D-Bus interface.
type Manager struct {
	object dbus.BusObject
}

// ResolveHostname calls org.freedesktop.resolve1.Manager.ResolveHostname method.
func (o *Manager) ResolveHostname(ctx context.Context, ifindex int32, name string, family int32, in_flags uint64) (addresses []struct {
	V0 int32
	V1 int32
	V2 []byte
}, canonical string, flags uint64, err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".ResolveHostname", 0, ifindex, name, family, in_flags).Store(&addresses, &canonical, &flags)
	return
}

// ResolveAddress calls org.freedesktop.resolve1.Manager.ResolveAddress method.
func (o *Manager) ResolveAddress(ctx context.Context, ifindex int32, family int32, address []byte, in_flags uint64) (names []struct {
	V0 int32
	V1 string
}, flags uint64, err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".ResolveAddress", 0, ifindex, family, address, in_flags).Store(&names, &flags)
	return
}

// ResolveRecord calls org.freedesktop.resolve1.Manager.ResolveRecord method.
func (o *Manager) ResolveRecord(ctx context.Context, ifindex int32, name string, class uint16, inType uint16, in_flags uint64) (records []struct {
	V0 int32
	V1 uint16
	V2 uint16
	V3 []byte
}, flags uint64, err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".ResolveRecord", 0, ifindex, name, class, inType, in_flags).Store(&records, &flags)
	return
}

// ResolveService calls org.freedesktop.resolve1.Manager.ResolveService method.
func (o *Manager) ResolveService(ctx context.Context, ifindex int32, name string, inType string, domain string, family int32, in_flags uint64) (srvData []struct {
	V0 uint16
	V1 uint16
	V2 uint16
	V3 string
	V4 []struct {
		V0 int32
		V1 int32
		V2 []byte
	}
	V5 string
}, txtData [][]byte, canonicalName string, canonicalType string, canonicalDomain string, flags uint64, err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".ResolveService", 0, ifindex, name, inType, domain, family, in_flags).Store(&srvData, &txtData, &canonicalName, &canonicalType, &canonicalDomain, &flags)
	return
}

// GetLink calls org.freedesktop.resolve1.Manager.GetLink method.
func (o *Manager) GetLink(ctx context.Context, ifindex int32) (path dbus.ObjectPath, err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".GetLink", 0, ifindex).Store(&path)
	return
}

// SetLinkDNS calls org.freedesktop.resolve1.Manager.SetLinkDNS method.
func (o *Manager) SetLinkDNS(ctx context.Context, ifindex int32, addresses []struct {
	V0 int32
	V1 []byte
}) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".SetLinkDNS", 0, ifindex, addresses).Store()
	return
}

// SetLinkDNSEx calls org.freedesktop.resolve1.Manager.SetLinkDNSEx method.
func (o *Manager) SetLinkDNSEx(ctx context.Context, ifindex int32, addresses []struct {
	V0 int32
	V1 []byte
	V2 uint16
	V3 string
}) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".SetLinkDNSEx", 0, ifindex, addresses).Store()
	return
}

// SetLinkDomains calls org.freedesktop.resolve1.Manager.SetLinkDomains method.
func (o *Manager) SetLinkDomains(ctx context.Context, ifindex int32, domains []struct {
	V0 string
	V1 bool
}) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".SetLinkDomains", 0, ifindex, domains).Store()
	return
}

// SetLinkDefaultRoute calls org.freedesktop.resolve1.Manager.SetLinkDefaultRoute method.
func (o *Manager) SetLinkDefaultRoute(ctx context.Context, ifindex int32, enable bool) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".SetLinkDefaultRoute", 0, ifindex, enable).Store()
	return
}

// SetLinkLLMNR calls org.freedesktop.resolve1.Manager.SetLinkLLMNR method.
func (o *Manager) SetLinkLLMNR(ctx context.Context, ifindex int32, mode string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".SetLinkLLMNR", 0, ifindex, mode).Store()
	return
}

// SetLinkMulticastDNS calls org.freedesktop.resolve1.Manager.SetLinkMulticastDNS method.
func (o *Manager) SetLinkMulticastDNS(ctx context.Context, ifindex int32, mode string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".SetLinkMulticastDNS", 0, ifindex, mode).Store()
	return
}

// SetLinkDNSOverTLS calls org.freedesktop.resolve1.Manager.SetLinkDNSOverTLS method.
func (o *Manager) SetLinkDNSOverTLS(ctx context.Context, ifindex int32, mode string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".SetLinkDNSOverTLS", 0, ifindex, mode).Store()
	return
}

// SetLinkDNSSEC calls org.freedesktop.resolve1.Manager.SetLinkDNSSEC method.
func (o *Manager) SetLinkDNSSEC(ctx context.Context, ifindex int32, mode string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".SetLinkDNSSEC", 0, ifindex, mode).Store()
	return
}

// SetLinkDNSSECNegativeTrustAnchors calls org.freedesktop.resolve1.Manager.SetLinkDNSSECNegativeTrustAnchors method.
func (o *Manager) SetLinkDNSSECNegativeTrustAnchors(ctx context.Context, ifindex int32, names []string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".SetLinkDNSSECNegativeTrustAnchors", 0, ifindex, names).Store()
	return
}

// RevertLink calls org.freedesktop.resolve1.Manager.RevertLink method.
func (o *Manager) RevertLink(ctx context.Context, ifindex int32) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".RevertLink", 0, ifindex).Store()
	return
}

// RegisterService calls org.freedesktop.resolve1.Manager.RegisterService method.
func (o *Manager) RegisterService(ctx context.Context, name string, nameTemplate string, inType string, servicePort uint16, servicePriority uint16, serviceWeight uint16, txtDatas []map[string][]byte) (servicePath dbus.ObjectPath, err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".RegisterService", 0, name, nameTemplate, inType, servicePort, servicePriority, serviceWeight, txtDatas).Store(&servicePath)
	return
}

// UnregisterService calls org.freedesktop.resolve1.Manager.UnregisterService method.
func (o *Manager) UnregisterService(ctx context.Context, servicePath dbus.ObjectPath) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".UnregisterService", 0, servicePath).Store()
	return
}

// ResetStatistics calls org.freedesktop.resolve1.Manager.ResetStatistics method.
func (o *Manager) ResetStatistics(ctx context.Context) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".ResetStatistics", 0).Store()
	return
}

// FlushCaches calls org.freedesktop.resolve1.Manager.FlushCaches method.
func (o *Manager) FlushCaches(ctx context.Context) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".FlushCaches", 0).Store()
	return
}

// ResetServerFeatures calls org.freedesktop.resolve1.Manager.ResetServerFeatures method.
func (o *Manager) ResetServerFeatures(ctx context.Context) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceManager+".ResetServerFeatures", 0).Store()
	return
}

// GetLLMNRHostname gets org.freedesktop.resolve1.Manager.LLMNRHostname property.
func (o *Manager) GetLLMNRHostname(ctx context.Context) (lLMNRHostname string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "LLMNRHostname").Store(&lLMNRHostname)
	return
}

// GetLLMNR gets org.freedesktop.resolve1.Manager.LLMNR property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetLLMNR(ctx context.Context) (lLMNR string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "LLMNR").Store(&lLMNR)
	return
}

// GetMulticastDNS gets org.freedesktop.resolve1.Manager.MulticastDNS property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetMulticastDNS(ctx context.Context) (multicastDNS string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "MulticastDNS").Store(&multicastDNS)
	return
}

// GetDNSOverTLS gets org.freedesktop.resolve1.Manager.DNSOverTLS property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetDNSOverTLS(ctx context.Context) (dNSOverTLS string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "DNSOverTLS").Store(&dNSOverTLS)
	return
}

// GetDNS gets org.freedesktop.resolve1.Manager.DNS property.
func (o *Manager) GetDNS(ctx context.Context) (dNS []struct {
	V0 int32
	V1 int32
	V2 []byte
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "DNS").Store(&dNS)
	return
}

// GetDNSEx gets org.freedesktop.resolve1.Manager.DNSEx property.
func (o *Manager) GetDNSEx(ctx context.Context) (dNSEx []struct {
	V0 int32
	V1 int32
	V2 []byte
	V3 uint16
	V4 string
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "DNSEx").Store(&dNSEx)
	return
}

// GetFallbackDNS gets org.freedesktop.resolve1.Manager.FallbackDNS property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = const
func (o *Manager) GetFallbackDNS(ctx context.Context) (fallbackDNS []struct {
	V0 int32
	V1 int32
	V2 []byte
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "FallbackDNS").Store(&fallbackDNS)
	return
}

// GetFallbackDNSEx gets org.freedesktop.resolve1.Manager.FallbackDNSEx property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = const
func (o *Manager) GetFallbackDNSEx(ctx context.Context) (fallbackDNSEx []struct {
	V0 int32
	V1 int32
	V2 []byte
	V3 uint16
	V4 string
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "FallbackDNSEx").Store(&fallbackDNSEx)
	return
}

// GetCurrentDNSServer gets org.freedesktop.resolve1.Manager.CurrentDNSServer property.
func (o *Manager) GetCurrentDNSServer(ctx context.Context) (currentDNSServer struct {
	V0 int32
	V1 int32
	V2 []byte
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "CurrentDNSServer").Store(&currentDNSServer)
	return
}

// GetCurrentDNSServerEx gets org.freedesktop.resolve1.Manager.CurrentDNSServerEx property.
func (o *Manager) GetCurrentDNSServerEx(ctx context.Context) (currentDNSServerEx struct {
	V0 int32
	V1 int32
	V2 []byte
	V3 uint16
	V4 string
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "CurrentDNSServerEx").Store(&currentDNSServerEx)
	return
}

// GetDomains gets org.freedesktop.resolve1.Manager.Domains property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetDomains(ctx context.Context) (domains []struct {
	V0 int32
	V1 string
	V2 bool
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "Domains").Store(&domains)
	return
}

// GetTransactionStatistics gets org.freedesktop.resolve1.Manager.TransactionStatistics property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetTransactionStatistics(ctx context.Context) (transactionStatistics struct {
	V0 uint64
	V1 uint64
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "TransactionStatistics").Store(&transactionStatistics)
	return
}

// GetCacheStatistics gets org.freedesktop.resolve1.Manager.CacheStatistics property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetCacheStatistics(ctx context.Context) (cacheStatistics struct {
	V0 uint64
	V1 uint64
	V2 uint64
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "CacheStatistics").Store(&cacheStatistics)
	return
}

// GetDNSSEC gets org.freedesktop.resolve1.Manager.DNSSEC property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetDNSSEC(ctx context.Context) (dNSSEC string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "DNSSEC").Store(&dNSSEC)
	return
}

// GetDNSSECStatistics gets org.freedesktop.resolve1.Manager.DNSSECStatistics property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetDNSSECStatistics(ctx context.Context) (dNSSECStatistics struct {
	V0 uint64
	V1 uint64
	V2 uint64
	V3 uint64
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "DNSSECStatistics").Store(&dNSSECStatistics)
	return
}

// GetDNSSECSupported gets org.freedesktop.resolve1.Manager.DNSSECSupported property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetDNSSECSupported(ctx context.Context) (dNSSECSupported bool, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "DNSSECSupported").Store(&dNSSECSupported)
	return
}

// GetDNSSECNegativeTrustAnchors gets org.freedesktop.resolve1.Manager.DNSSECNegativeTrustAnchors property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetDNSSECNegativeTrustAnchors(ctx context.Context) (dNSSECNegativeTrustAnchors []string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "DNSSECNegativeTrustAnchors").Store(&dNSSECNegativeTrustAnchors)
	return
}

// GetDNSStubListener gets org.freedesktop.resolve1.Manager.DNSStubListener property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetDNSStubListener(ctx context.Context) (dNSStubListener string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "DNSStubListener").Store(&dNSStubListener)
	return
}

// GetResolvConfMode gets org.freedesktop.resolve1.Manager.ResolvConfMode property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = false
func (o *Manager) GetResolvConfMode(ctx context.Context) (resolvConfMode string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceManager, "ResolvConfMode").Store(&resolvConfMode)
	return
}
